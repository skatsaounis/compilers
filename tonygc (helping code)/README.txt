Εθνικό Μετσόβιο Πολυτεχνείο.
Σχολή Ηλεκτρολόγων Μηχανικών και Μηχανικών Υπολογιστών.
Τομέας Τεχνολογίας Πληροφορικής και Υπολογιστών.
Εργαστήριο Τεχνολογίας Λογισμικού

(in Greek iso-8859-7)


                ΣΥΛΛΕΚΤΗΣ ΣΚΟΥΠΙΔΙΩΝ ΓΙΑ ΤΗ ΓΛΩΣΣΑ TONY


Ακολουθεί μία σύντομη (και σίγουρα ελλειπής) τεκμηρίωση του συλλέκτη
σκουπιδιών (garbage collector) της γλώσσας Tony, που δίνεται στο πλαίσιο
του μαθήματος "Μεταγλωττιστές" για την ακαδημαϊκή χρονιά 2009-10.


1. Υλοποίηση του συλλέκτη σκουπιδιών

Έχει υλοποιηθεί ένας συλλέκτης αντιγραφής (copying garbage collector)
δύο χώρων.  Η υλοποίησή του βρίσκεται στο directory src/memory/ της
βιβλιοθήκης προκαθορισμένων συναρτήσεων της γλώσσας.  Μπορείτε να
την προμηθευτείτε από τη σελίδα του μαθήματος.  Τα αρχεία που σας
ενδιαφέρουν είναι:

   gc.asm         (gc, allocate και register_call_table)

   newarrv,asm newarrp.asm
   consv.asm consp.asm
   head.asm tail.asm

Εδώ μπορείτε να βρείτε επίσης μία υλοποίηση του συλλέκτη σκουπιδιών
σε C, από την οποία προέκυψε η πρώτη μορφή της έκδοσης σε assembly
που βρίσκεται στη βιβλιοθήκη, καθώς και μία σχετικά πιστή προσομοίωση
του συστήματος εκτέλεσης (και τα δύο στο directory simulate).

2. Πρόλογος και επίλογος του προγράμματος

Για τη χρήση του συλλέκτη σκουπιδιών απαιτούνται οι αλλαγές στον
πρόλογο και τον επίλογο του προγράμματος που φαίνονται στο παράδειγμα
μεταφρασμένου προγράμματος test.asm, που προκύπτει από τη μετάφραση
του αρχικού προγράμματος test.tony.  Για τη συμβολομετάφραση του
παραδείγματος, αντικαταστήστε το σύνδεσμο tony.lib με τη βιβλιοθήκη
της γλώσσας και το σύνδεσμο support με ένα directory που να περιέχει
το συμβολομεταφραστή (masm) και το συνδέτη (link).

Στον πρόλογο του προγράμματος προστίθενται:

  α) Ο κώδικας για την αρχικοποίηση της διαθέσιμης μνήμης σε 3 ίσα
     μέρη: πρώτο μισό του σωρού, δεύτερο μισό του σωρού, και στοίβα.

  β) Ο κώδικας για την καταγραφή των συναρτήσεων τα Ε.Δ. των οποίων
     μπορεί να βρίσκονται στη στοίβα όταν ενεργοποιηθεί ο συλλέκτης
     Για κάθε μία χρειάζεται να κληθεί η _register_call_table.

  γ) Προσθήκη της ετικέτας _ret_of_main που σηματοδοτεί τη διεύθυνση
     επιστροφής του πρώτου Ε.Δ. που βρίσκεται στη στοίβα.

Στον επίλογο προστίθενται:

  α) Οι απαραίτητες συναρτήσεις βιβλιοθήκης

  β) Οι δημόσιες (public) μεταβλητές _space_from, _limit_from,
     _space_to, _limit_to και _next

  γ) Μετά το τέλος του segment xseg, ο ορισμός του segment
     _DATA_END και του group DGROUP.  Με αυτά τα δύο ορίζεται
     η διεύθυνση _start_of_space που σηματοδοτεί την αρχή της
     μνήμης που είναι διαθέσιμη στο σωρό.


3. Για κάθε κλήση συνάρτησης

Κάθε κλήση συνάρτησης, το Ε.Δ. της οποίας μπορεί να βρίσκεται στη
στοίβα όταν ενεργοποιηθεί ο συλλέκτης σκουπιδιών, πρέπει να
ακολουθείται από μία ετικέτα που να αντιστοιχεί στη διεύθυνση
επιστροφής της, π.χ. @make_list_1_call_1.  Στο παράδειγμα test.asm
αυτό έχει γίνει ακριβώς και μόνο για τις συναρτήσεις δια μέσου των
οποίων μπορεί να κληθεί ο συλλέκτης σκουπιδιών, π.χ. δεν έχει
γίνει για την print_list που δεν καλεί την cons, ούτε άμεσα αλλά
ούτε έμμεσα.  Στο δικό σας μεταγλωττιστή, αν δεν είναι εύκολο να
βρείτε αυτήν την πληροφορία, μπορείτε να υποθέσετε συντηρητικά
ότι ο συλλέκτης σκουπιδιών ενεργοποιείται μέσω όλων των κλήσεων.

Οι πληροφορίες από αυτές τις κλήσεις θα συγκεντρώνονται στον
πίνακα πληροφοριών κλήσεων (call table) ανά συνάρτηση.


4. Για κάθε συνάρτηση

Για κάθε συνάρτηση που περιέχει κλήσεις δια μέσου των οποίων
μπορεί να ενεργοποιηθεί ο συλλέκτης σκουπιδιών, πρέπει να
κατασκευάζεται ένας πίνακας πληροφοριών κλήσης.  Ο πίνακας
αυτός αποτελείται από μία ακολουθία εγγραφών, μία για κάθε
κλήση, που σχηματίζουν μία συνδεδεμένη λίστα.  Κάθε εγγραφή
περιέχει:

   1η λέξη:  τη διεύθυνση επιστροφής της κλήσης
             (π.χ. @revert_aux_4_call_1)

   2η λέξη:  το σύνδεσμο προς την αρχή της επόμενης εγγραφής
             (π.χ. @call_4_2)

   3η λέξη:  την απόσταση από τη διεύθυνση επιστροφής αυτής
             της κλήσης μέχρι τη διεύθυνση επιστροφής της
             αμέσως προηγούμενης κλήσης στη δυναμική αλυσίδα
             (π.χ. 8 + 2 + 8 + 4)

   επόμενες λέξεις: δείχνουν τις θέσεις στο Ε.Δ. της συνάρτησης
             μέσα στην οποία γίνεται η κλήση, οι οποίες περιέχουν
             δείκτες στο σωρό.  Για κάθε θέση αναγράφεται η
             απόκλισή της ως προς το bp (π.χ. 10 ή -2).
             Το τέλος των αποκλίσεων σηματοδοτείται με ένα 0.

Ακολουθούν περισσότερες λεπτομέρειες για το πώς υπολογίζεται
η απόσταση των διευθύνσεων επιστροφής (3η λέξη) και ποιες
μεταβλητές δείκτες περιλαμβάνονται στις επόμενες λέξεις.
Ως παράδειγμα εξετάζεται ο πίνακας πληροφοριών κλήσεων
_revert_aux_4_call_table.  Αυτός αντιστοιχεί στη συνάρτηση:

    def list[int] revert_aux (list [int] l, r):
        if l = nil:
            return r
        else:
            return revert_aux(tail(l), cons(head(l), r))
        end
    end

Ο αντίστοιχος ενδιάμεσος κώδικας είναι:

    73: unit, revert_aux, -, -
    74: =, l, nil, 76
    75: jump, -, -, 79
    76: :=, r, -, $$
    77: ret, -, -, -
    78: jump -, -, 96
    79: par, l, V, -
    80: par, $1, RET, -
    81: call, -, -, tail           ; <= call #1
    82: par, $1, V, -              ; this is the extra!
    84: par, l, V, -
    85: par, $2, RET, -
    86: call, -, -, head
    87: par, $2, V, -
    88: par, r, V, -
    89: par, $3, RET, -
    90: call, -, -, cons
    91: par, $3, V, -
    92: par, $4, RET, -
    93: call, -, -, revert_aux     ; <= call #1
    94: :=, $4, -, $$
    95: ret, -, -, -
    96: endu, revert_aux, -, -

(Η μετάφραση έγινε με το χέρι και η αρίθμηση είναι λάθος:
παρέλειψα την ετικέτα 83 στις τετράδες.)

Η συνάρτηση περιέχει δύο κλήσεις δια μέσου των οποίων μπορεί
να κληθεί ο συλλέκτης σκουπιδιών: η πρώτη στην cons και η
δεύτερη (αναδρομική) στην revert_aux.

Για να υπολογίσει κανείς την απόσταση μεταξύ των διευθύνσεων
επιστροφής (3η λέξη) πρέπει να αθροίσει τα εξής μεγέθη:

  (α) Παράμετροι της νέας κλήσης + 4
      (αυτός είναι ο αριθμός που προστίθεται στο sp στον
      τελικό κώδικα μετά το call).
      Και στις δυό κλήσεις τυχαίνει να είναι 8.

  (β) Παράμετροι άλλων μεταγενέστερων κλήσεων που έχουν τυχόν
      ήδη τοποθετηθεί στη στοίβα.
      Αυτός ο αριθμός είναι συνήθως μηδέν (όπως στην αναδρομική
      κλήση).  Όμως, επειδή η κλήση της cons είναι φωλιασμένη
      μέσα στην αναδρομική κλήση της revert_aux, το πέρασμα
      παραμέτρων της δεύτερης έχει ήδη αρχίσει όταν καλείται
      η πρώτη.  Μέχρι εκείνη τη στιγμή έχει τοποθετηθεί στη
      στοίβα η πρώτη παράμετρος της revert_aux ($1), που είναι
      δείκτης στο σωρό.  Επομένως, για την κλήση της cons πρέπει
      να προστεθεί εδώ το μέγεθος της πρώτης παραμέτρου της
      revert_aux: 2.

  (γ) Τοπικές και προσωρινές μεταβλητές της συνάρτησης που
      καλεί, όπως εμφανίζονται στον τελικό κώδικα που προκύπτει
      από την τετράδα unit.  Και στις δύο κλήσεις τυχαίνει να
      είναι 8.

  (δ) Αποθηκευμένο bp και σύνδεσμος προσπέλασης για τη νέα κλήση:
      σταθερό μέγεθος 4.

Στις επόμενες λέξεις με τις αποκλίσεις των δεικτών στο σωρό
πρέπει να ληφθούν υπόψη οι παράμετροι, οι τοπικές και οι προσωρινές
μεταβλητές της συνάρτησης που καλεί, καθώς και οι επιπλέον παράμετροι
μεταγενέστερων κλήσεων που τυχόν βρίσκονται στη στοίβα (βλ. β παραπάνω).
Αν έχει προηγηθεί ανάλυση ροής δεδομένων (data flow analysis) και
ανάλυση διάρκειας ζωής (liveness analysis), αρκεί να προστεθούν οι
παράμετροι και οι μεταβλητές που είναι ζωντανές αμέσως μετά τη νέα
κλήση.  Η ανάλυση αυτή για το παράδειγμα test.asm έχει γίνει με το
χέρι.  Το macro LIVENESS ελέγχει αν θα ληφθεί ή όχι υπόψη το αποτέλεσμα
αυτής της ανάλυσης.  Αν ληφθεί, η συλλογή σκουπιδιών συλλέγει περισσότερα
σκουπίδια από το σωρό, με αποτέλεσμα να επαρκεί η μνήμη για μεγαλύτερα
όρια του βρόχου.


5. Περιορισμοί

Ο συλλέκτης σκουπιδιών θεωρεί ως σύνολο ριζών (root set) τη στοίβα.
Αγνοεί τις τιμές των καταχωρητών και τις καθολικές μεταβλητές.
Αυτό σημαίνει ότι τυχόν βελτιστοποιήσεις δε θα πρέπει να βασίζονται
σε τιμές καταχωρητών που επιζούν μεταξύ κλήσεων.

Επίσης, ο συλλέκτης σκουπιδιών αγνοεί την περίπτωση των παραγόμενων
δεικτών (derived pointers).  Αυτό σημαίνει ότι θα αποτύχει (και
πιθανώς το όχι πολύ gracefully) αν το αρχικό πρόγραμμα περιέχει:

  (α) στοιχεία πινάκων που περνούν κατ' αναφορά

  (β) στοιχεία πινάκων που περνούν με οποιονδήποτε τρόπο σε
      φωλιασμένες κλήσεις της μορφής:

        foo(a[7], bar(42))

  (γ) άλλους παραγόμενους δείκτες που προκύπτουν από βελτιωτικούς
      μετασχηματισμούς.


Καλή τύχη και γερά νεύρα...
Ν. Παπασπύρου.
